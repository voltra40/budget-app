# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: budget-app
# app and org for use with dashboard.serverless.com
app: budget-app
org: voltra40

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

plugins:
  - serverless-plugin-typescript

custom:
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.build.json"

provider:
  name: aws
  runtime: nodejs12.x
  httpApi:
    cors: true
    allowedMethods:
      - GET
      - POST
      - PUT
      - DELETE

  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  #  iam:
  #    role:
  #      statements:
  #        - Effect: "Allow"
  #          Action:
  #            - "s3:ListBucket"
  #          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #        - Effect: "Allow"
  #          Action:
  #            - "s3:PutObject"
  #          Resource:
  #            Fn::Join:
  #              - ""
  #              - - "arn:aws:s3:::"
  #                - "Ref" : "ServerlessDeploymentBucket"
  #                - "/*"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
          Resource:
            - {"Fn::GetAtt": ["budgetTable", "Arn"]}

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

package:
  exclude:
    - node_modules/**
    - "!node_modules/@middy/**"
  individually: true

functions:
  getBudget:
    handler: pages/api/getBudget.handler
    events:
      - httpApi:
          path: /getBudget
          method: get
          cors: true
  getItem:
    handler: pages/api/getItem.handler
    events:
      - httpApi:
          path: /name/{name}/amount/{amount}
          method: get
          cors: true
  addItem:
    handler: pages/api/addItem.handler
    events:
      - httpApi:
          path: /addItem
          method: post
          cors: true
  updateItem:
    handler: pages/api/updateItem.handler
    events:
      - httpApi:
          path: /updateItem/{name}
          method: put
          cors: true
  deleteItem:
    handler: pages/api/deleteItem.handler
    events:
      - httpApi:
          path: /name/{name}
          method: delete
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    budgetTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: budget
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: amount
            AttributeType: N
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: amount
            KeyType: RANGE
